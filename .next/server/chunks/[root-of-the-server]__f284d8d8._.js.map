{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/remote-audit/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\n\ninterface RemoteAuditRequest {\n  agentIds: string[]\n  frameworks: string[]\n  customScript?: string\n  scheduled: boolean\n  interval: string\n  options: {\n    realTimeMonitoring: boolean\n    autoRemediation: boolean\n    alertThreshold: number\n    aiAnalysis: boolean\n    threatIntelligence: boolean\n  }\n}\n\ninterface AgentScanResult {\n  agentId: string\n  agentName: string\n  status: 'success' | 'error'\n  data: any\n  executionTime: number\n  findings: Finding[]\n  systemInfo: {\n    os: string\n    version: string\n    location: string\n    capabilities: string[]\n  }\n}\n\ninterface Finding {\n  id: string\n  control: string\n  status: 'pass' | 'fail' | 'warning'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  description: string\n  evidence: string\n  remediation: string\n}\n\nconst MOCK_AGENTS = {\n  'agent-001': {\n    name: 'Web Server - Production',\n    location: 'US-East-1',\n    os: 'Ubuntu 20.04',\n    version: '2.1.0',\n    capabilities: ['web-scan', 'ssl-check', 'header-analysis', 'vuln-scan']\n  },\n  'agent-002': {\n    name: 'Database Server - Primary',\n    location: 'US-West-2',\n    os: 'CentOS 8',\n    version: '2.1.0',\n    capabilities: ['db-audit', 'access-control', 'encryption-check', 'compliance-scan']\n  },\n  'agent-003': {\n    name: 'API Gateway',\n    location: 'EU-Central-1',\n    os: 'Alpine Linux',\n    version: '2.0.8',\n    capabilities: ['api-security', 'rate-limiting', 'auth-check', 'traffic-analysis']\n  },\n  'agent-004': {\n    name: 'Mobile Backend',\n    location: 'Asia-Pacific-1',\n    os: 'Ubuntu 22.04',\n    version: '2.1.0',\n    capabilities: ['mobile-security', 'data-encryption', 'privacy-scan']\n  },\n  'agent-005': {\n    name: 'Cloud Infrastructure',\n    location: 'Multi-Region',\n    os: 'Container Linux',\n    version: '2.1.1',\n    capabilities: ['cloud-security', 'iam-audit', 'network-scan', 'container-scan']\n  },\n  'agent-006': {\n    name: 'IoT Device Monitor',\n    location: 'Edge-Network',\n    os: 'Embedded Linux',\n    version: '1.9.2',\n    capabilities: ['iot-security', 'device-audit', 'firmware-check']\n  }\n}\n\nconst AUDIT_SCRIPTS = {\n  hipaa: {\n    name: 'HIPAA Compliance Audit',\n    script: `#!/bin/bash\n# HIPAA Compliance Audit Script\necho \"Starting HIPAA compliance audit...\"\n# Check encryption at rest\nfind /var/lib -name \"*.db\" -exec file {} \\\\; | grep -i encrypt\n# Check access logs\ntail -100 /var/log/auth.log | grep -i \"authentication\"\n# Check firewall rules\niptables -L | grep -E \"(ACCEPT|DROP|REJECT)\"\necho \"HIPAA audit completed\"`,\n    controls: ['Administrative Safeguards', 'Physical Safeguards', 'Technical Safeguards']\n  },\n  iso27001: {\n    name: 'ISO 27001 Security Audit',\n    script: `#!/bin/bash\n# ISO 27001 Security Management Audit\necho \"Starting ISO 27001 audit...\"\n# Asset inventory\nlsblk && lscpu && free -h\n# Security policies check\nls -la /etc/security/\n# Access control verification\ngetent passwd | wc -l\necho \"ISO 27001 audit completed\"`,\n    controls: ['Security Policy', 'Asset Management', 'Access Control', 'Cryptography']\n  },\n  soc2: {\n    name: 'SOC 2 Trust Services Audit',\n    script: `#!/bin/bash\n# SOC 2 Trust Services Criteria Audit\necho \"Starting SOC 2 audit...\"\n# System availability check\nuptime && systemctl status\n# Processing integrity verification\nps aux | grep -E \"(backup|sync|integrity)\"\n# Confidentiality controls\nfind /etc -name \"*ssl*\" -o -name \"*tls*\"\necho \"SOC 2 audit completed\"`,\n    controls: ['Security', 'Availability', 'Processing Integrity', 'Confidentiality']\n  },\n  pci: {\n    name: 'PCI DSS Payment Security Audit',\n    script: `#!/bin/bash\n# PCI DSS Compliance Audit\necho \"Starting PCI DSS audit...\"\n# Network security assessment\nnetstat -tuln | grep -E \":80|:443|:22\"\n# Cardholder data protection check\nfind / -name \"*card*\" -o -name \"*payment*\" 2>/dev/null | head -10\n# Vulnerability management\nwhich nmap && which openssl\necho \"PCI DSS audit completed\"`,\n    controls: ['Network Security', 'Data Protection', 'Vulnerability Management']\n  },\n  gdpr: {\n    name: 'GDPR Privacy Compliance Audit',\n    script: `#!/bin/bash\n# GDPR Privacy Compliance Audit\necho \"Starting GDPR audit...\"\n# Data processing lawfulness check\nfind /var/log -name \"*privacy*\" -o -name \"*consent*\"\n# Data subject rights verification\nls -la /opt/privacy-tools/ 2>/dev/null || echo \"Privacy tools not found\"\n# Privacy by design assessment\ngrep -r \"privacy\" /etc/app-config/ 2>/dev/null || echo \"No privacy config found\"\necho \"GDPR audit completed\"`,\n    controls: ['Lawfulness', 'Data Subject Rights', 'Privacy by Design']\n  },\n  nist: {\n    name: 'NIST Cybersecurity Framework Audit',\n    script: `#!/bin/bash\n# NIST CSF Audit\necho \"Starting NIST CSF audit...\"\n# Identify function - Asset Management\nlshw -short && ip addr show\n# Protect function - Access Control\ncat /etc/passwd | wc -l && last | head -10\n# Detect function - Monitoring\nps aux | grep -E \"(monitor|detect|log)\"\necho \"NIST CSF audit completed\"`,\n    controls: ['Identify', 'Protect', 'Detect', 'Respond', 'Recover']\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body: RemoteAuditRequest = await request.json()\n    \n    // Validate input\n    if (!body.agentIds || body.agentIds.length === 0) {\n      return NextResponse.json(\n        { error: \"At least one agent must be selected\" },\n        { status: 400 }\n      )\n    }\n\n    if (!body.frameworks || body.frameworks.length === 0) {\n      return NextResponse.json(\n        { error: \"At least one compliance framework must be selected\" },\n        { status: 400 }\n      )\n    }\n\n    const startTime = Date.now()\n    const agentResults: AgentScanResult[] = []\n\n    // Simulate distributed audit execution\n    for (const agentId of body.agentIds) {\n      const agent = MOCK_AGENTS[agentId as keyof typeof MOCK_AGENTS]\n      if (!agent) {\n        continue\n      }\n\n      const agentStartTime = Date.now()\n      \n      // Simulate agent execution\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 500))\n      \n      const agentExecutionTime = Date.now() - agentStartTime\n      \n      // Generate findings for each framework\n      const findings: Finding[] = []\n      \n      for (const framework of body.frameworks) {\n        const auditScript = AUDIT_SCRIPTS[framework as keyof typeof AUDIT_SCRIPTS]\n        if (auditScript) {\n          // Simulate script execution results\n          const frameworkFindings = generateAgentFindings(\n            agentId, \n            framework, \n            auditScript, \n            agent,\n            body.options\n          )\n          findings.push(...frameworkFindings)\n        }\n      }\n\n      // Simulate custom script execution\n      if (body.customScript) {\n        const customFindings = executeCustomScript(agentId, body.customScript, agent)\n        findings.push(...customFindings)\n      }\n\n      const agentResult: AgentScanResult = {\n        agentId,\n        agentName: agent.name,\n        status: Math.random() > 0.1 ? 'success' : 'error',\n        executionTime: agentExecutionTime,\n        findings,\n        systemInfo: {\n          os: agent.os,\n          version: agent.version,\n          location: agent.location,\n          capabilities: agent.capabilities\n        },\n        data: {\n          scriptsExecuted: body.frameworks.length + (body.customScript ? 1 : 0),\n          commandsRun: Math.floor(Math.random() * 20) + 10,\n          dataCollected: `${Math.floor(Math.random() * 500) + 100}KB`,\n          timestamp: new Date().toISOString(),\n          networkLatency: Math.floor(Math.random() * 100) + 20,\n          systemLoad: Math.random() * 100,\n          memoryUsage: Math.random() * 100,\n          diskUsage: Math.random() * 100\n        }\n      }\n\n      agentResults.push(agentResult)\n    }\n\n    const totalExecutionTime = Date.now() - startTime\n\n    // Calculate overall compliance score\n    const allFindings = agentResults.flatMap(result => result.findings)\n    const passedFindings = allFindings.filter(f => f.status === 'pass').length\n    const totalFindings = allFindings.length\n    const complianceScore = totalFindings > 0 ? Math.round((passedFindings / totalFindings) * 100) : 0\n\n    // Generate recommendations\n    const recommendations = generateRemoteAuditRecommendations(agentResults, body.options)\n\n    // Handle scheduled scanning\n    let schedulingInfo = null\n    if (body.scheduled) {\n      schedulingInfo = {\n        interval: body.interval,\n        nextRun: getNextScheduledRun(body.interval),\n        enabled: true\n      }\n    }\n\n    const result = {\n      id: `remote-audit-${Date.now()}`,\n      timestamp: new Date().toISOString(),\n      framework: body.frameworks.join(', '),\n      target: `${body.agentIds.length} distributed agents`,\n      status: 'completed' as const,\n      score: complianceScore,\n      findings: allFindings,\n      recommendations,\n      executionTime: totalExecutionTime,\n      agentData: agentResults,\n      auditSummary: {\n        totalAgents: body.agentIds.length,\n        successfulAgents: agentResults.filter(r => r.status === 'success').length,\n        failedAgents: agentResults.filter(r => r.status === 'error').length,\n        totalFindings: allFindings.length,\n        criticalFindings: allFindings.filter(f => f.severity === 'critical').length,\n        highFindings: allFindings.filter(f => f.severity === 'high').length,\n        schedulingInfo\n      }\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Remote audit error:', error)\n    return NextResponse.json(\n      { error: \"Internal server error during remote audit\" },\n      { status: 500 }\n    )\n  }\n}\n\nfunction generateAgentFindings(\n  agentId: string, \n  framework: string, \n  auditScript: any, \n  agent: any,\n  options: any\n): Finding[] {\n  const findings: Finding[] = []\n  \n  for (const control of auditScript.controls) {\n    // Simulate different compliance states based on agent capabilities\n    let status: 'pass' | 'fail' | 'warning' = 'pass'\n    let severity: 'low' | 'medium' | 'high' | 'critical' = 'low'\n    \n    // Simulate realistic compliance checking\n    const hasRelevantCapability = agent.capabilities.some((cap: string) => \n      cap.includes('security') || cap.includes('audit') || cap.includes('compliance')\n    )\n    \n    if (!hasRelevantCapability) {\n      status = Math.random() > 0.6 ? 'fail' : 'warning'\n      severity = status === 'fail' ? 'high' : 'medium'\n    } else {\n      // Even with capabilities, some checks might fail\n      if (Math.random() > 0.8) {\n        status = 'warning'\n        severity = 'medium'\n      }\n    }\n\n    // AI analysis enhancement\n    if (options.aiAnalysis && Math.random() > 0.7) {\n      if (severity === 'low') severity = 'medium'\n      else if (severity === 'medium') severity = 'high'\n    }\n\n    // Threat intelligence integration\n    if (options.threatIntelligence && Math.random() > 0.8) {\n      severity = 'critical'\n      status = 'fail'\n    }\n\n    findings.push({\n      id: `finding-${agentId}-${framework}-${control.replace(/\\s+/g, '-')}-${Date.now()}`,\n      control: `${framework.toUpperCase()}-${control}`,\n      status,\n      severity,\n      description: `${control} compliance check on ${agent.name}`,\n      evidence: `Agent ${agentId} executed ${framework} audit script`,\n      remediation: status === 'pass' \n        ? 'No action required' \n        : `Review ${control} implementation on ${agent.name}`\n    })\n  }\n  \n  return findings\n}\n\nfunction executeCustomScript(agentId: string, script: string, agent: any): Finding[] {\n  // Simulate custom script execution\n  const findings: Finding[] = []\n  \n  // Basic script validation\n  if (script.includes('rm -rf') || script.includes('format') || script.includes('delete')) {\n    findings.push({\n      id: `custom-${agentId}-${Date.now()}`,\n      control: 'CUSTOM-SCRIPT-SAFETY',\n      status: 'fail',\n      severity: 'critical',\n      description: 'Custom script contains potentially dangerous commands',\n      evidence: 'Script analysis detected destructive operations',\n      remediation: 'Review and sanitize custom script before execution'\n    })\n    return findings\n  }\n\n  // Simulate successful custom script execution\n  findings.push({\n    id: `custom-${agentId}-${Date.now()}`,\n    control: 'CUSTOM-SCRIPT-EXECUTION',\n    status: 'pass',\n    severity: 'low',\n    description: `Custom script executed successfully on ${agent.name}`,\n    evidence: `Script executed with ${Math.floor(Math.random() * 10) + 1} commands`,\n    remediation: 'No action required'\n  })\n\n  return findings\n}\n\nfunction generateRemoteAuditRecommendations(agentResults: AgentScanResult[], options: any): string[] {\n  const recommendations: string[] = []\n  \n  const totalAgents = agentResults.length\n  const successfulAgents = agentResults.filter(r => r.status === 'success').length\n  const failedAgents = totalAgents - successfulAgents\n  \n  if (failedAgents > 0) {\n    recommendations.push(`${failedAgents} agents failed to complete the audit - investigate connectivity issues`)\n  }\n  \n  const allFindings = agentResults.flatMap(r => r.findings)\n  const criticalFindings = allFindings.filter(f => f.severity === 'critical').length\n  const highFindings = allFindings.filter(f => f.severity === 'high').length\n  \n  if (criticalFindings > 0) {\n    recommendations.push(`${criticalFindings} critical issues found across the agent network - immediate action required`)\n  }\n  \n  if (highFindings > 0) {\n    recommendations.push(`${highFindings} high-priority issues identified - schedule remediation within 24 hours`)\n  }\n  \n  // Agent-specific recommendations\n  const slowAgents = agentResults.filter(r => r.executionTime > 5000)\n  if (slowAgents.length > 0) {\n    recommendations.push(`${slowAgents.length} agents showing slow response times - check system performance`)\n  }\n  \n  if (options.realTimeMonitoring) {\n    recommendations.push('Real-time monitoring is active - consider setting up automated alerts for critical findings')\n  }\n  \n  if (options.autoRemediation) {\n    recommendations.push('Auto-remediation enabled - review automated fixes and ensure they align with security policies')\n  }\n  \n  recommendations.push('Distribute audit results to relevant teams for coordinated remediation efforts')\n  recommendations.push('Schedule follow-up scans to verify remediation effectiveness')\n  \n  return recommendations\n}\n\nfunction getNextScheduledRun(interval: string): string {\n  const now = new Date()\n  let nextRun = new Date(now)\n  \n  switch (interval) {\n    case 'hourly':\n      nextRun.setHours(now.getHours() + 1)\n      break\n    case 'daily':\n      nextRun.setDate(now.getDate() + 1)\n      break\n    case 'weekly':\n      nextRun.setDate(now.getDate() + 7)\n      break\n    case 'monthly':\n      nextRun.setMonth(now.getMonth() + 1)\n      break\n    default:\n      nextRun.setDate(now.getDate() + 1)\n  }\n  \n  return nextRun.toISOString()\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}